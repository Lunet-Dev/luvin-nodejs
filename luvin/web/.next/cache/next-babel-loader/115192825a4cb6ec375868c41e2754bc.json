{"ast":null,"code":"import { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport { LOGIN, REGISTER, GET_USER_INFO, LOGOUT, UPDATE_USER_INFO, UPDATE_PASSWORD } from \"../constants/auth\";\nimport { loginSuccess, loginError, registerSuccess, registerError, getUserInfoSuccess, updateUserInfoSuccess, updateUserInfoError, updatePasswordSuccess, updatePasswordError } from \"../actions/auth\";\nimport Request from \"../utils/request\";\nimport Authendication from \"../utils/authendication\";\nexport function* handleLogin(action) {\n  const url = \"/auth/login\";\n\n  try {\n    const response = yield call(Request, url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        phone: action.phone,\n        password: action.password\n      })\n    });\n    Authendication.saveAuthToCookie(response.data.token);\n    yield put(loginSuccess(response.data.user));\n  } catch (error) {\n    yield put(loginError(error.message));\n  }\n}\nexport function* handleRegister(action) {\n  const url = \"/auth/register\";\n\n  try {\n    const response = yield call(Request, url, {\n      method: \"POST\",\n      body: JSON.stringify(action.registerInfo)\n    });\n    Authendication.saveAuthToCookie(response.data.token);\n    yield put(registerSuccess(response.data.user));\n  } catch (error) {\n    yield put(registerError(error.message));\n  }\n}\nexport function* handleGetUserInfo(action) {\n  const url = \"/auth/me\";\n\n  try {\n    const response = yield call(Request, url, {}, action.accessToken);\n    yield put(getUserInfoSuccess(response.data));\n  } catch (error) {// yield put(registerError(error.message));\n  }\n}\nexport function* handleLogout(action) {\n  Authendication.logout();\n}\nexport function* handleUpdateUserInfo(action) {\n  try {\n    const url = `/user/${action.userId}`;\n    const response = yield call(Request, url, {\n      method: \"PUT\",\n      body: JSON.stringify(action.userInfo)\n    });\n    yield put(updateUserInfoSuccess(response.data));\n  } catch (error) {\n    yield put(updateUserInfoError(error.message));\n  }\n}\nexport function* handleUpdatePassword(action) {\n  try {\n    const url = \"/auth/update-password\";\n    const response = yield call(Request, url, {\n      method: \"PUT\",\n      body: JSON.stringify(action.passwordData)\n    });\n    yield put(updatePasswordSuccess());\n  } catch (error) {\n    yield put(updatePasswordError(error.message));\n  }\n}\nexport default function* rootSaga() {\n  yield all([yield takeLatest(LOGIN, handleLogin), yield takeLatest(REGISTER, handleRegister), yield takeLatest(GET_USER_INFO, handleGetUserInfo), yield takeLatest(LOGOUT, handleLogout), yield takeLatest(UPDATE_USER_INFO, handleUpdateUserInfo), yield takeLatest(UPDATE_PASSWORD, handleUpdatePassword)]);\n}","map":null,"metadata":{},"sourceType":"module"}