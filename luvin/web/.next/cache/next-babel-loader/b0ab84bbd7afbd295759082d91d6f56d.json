{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleSearch),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport { SEARCH } from \"../constants/search\";\nimport { searchSuccess, searchError } from \"../actions/search\";\nimport Request from \"../utils/request\";\nexport function handleSearch(action) {\n  var url, response;\n  return _regeneratorRuntime.wrap(function handleSearch$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = \"/product?limit=\".concat(action.limit, \"&page=\").concat(action.page, \"&name=\").concat(action.name);\n          _context.prev = 1;\n          _context.next = 4;\n          return call(Request, url);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put(searchSuccess(response.data.total, response.data.products));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(searchError(_context.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = all;\n          _context2.next = 3;\n          return takeLatest(SEARCH, handleSearch);\n\n        case 3:\n          _context2.t1 = _context2.sent;\n          _context2.t2 = [_context2.t1];\n          _context2.next = 7;\n          return (0, _context2.t0)(_context2.t2);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}