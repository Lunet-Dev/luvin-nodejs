{"ast":null,"code":"import { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport { FORGOT_PASSWORD, FORGOT_PASSWORD_CONFIRMATION } from \"../constants/forgotPassword\";\nimport { forgotPasswordSuccess, forgotPasswordError, forgotPasswordConfirmationSuccess, forgotPasswordConfirmationError } from \"../actions/forgotPassword\";\nimport { loginSuccess } from \"../actions/auth\";\nimport Request from \"../utils/request\";\nimport Authendication from \"../utils/authendication\";\nexport function* handleForgotPassword(action) {\n  const url = \"/auth/forgot-password\";\n\n  try {\n    const response = yield call(Request, url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: action.username\n      })\n    });\n    yield put(forgotPasswordSuccess(response.data));\n  } catch (error) {\n    yield put(forgotPasswordError(error.message));\n  }\n}\nexport function* handleForgotPasswordConfirmation(action) {\n  const url = \"/auth/forgot-password/confirmation\";\n\n  try {\n    const response = yield call(Request, url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: action.token,\n        password: action.password\n      })\n    });\n    Authendication.saveAuthToCookie(response.data.token);\n    yield put(loginSuccess(response.data.user));\n    yield put(forgotPasswordConfirmationSuccess());\n  } catch (error) {\n    yield put(forgotPasswordConfirmationError(error.message));\n  }\n}\nexport default function* rootSaga() {\n  yield all([yield takeLatest(FORGOT_PASSWORD, handleForgotPassword), yield takeLatest(FORGOT_PASSWORD_CONFIRMATION, handleForgotPasswordConfirmation)]);\n}","map":null,"metadata":{},"sourceType":"module"}