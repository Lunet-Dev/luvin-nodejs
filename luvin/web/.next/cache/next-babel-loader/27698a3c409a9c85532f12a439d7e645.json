{"ast":null,"code":"import { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport { GET_EVENT, JOIN_EVENT } from \"../constants/event\";\nimport { getEventSuccess, getEventError, joinEventSuccess, joinEventError } from \"../actions/event\";\nimport Request from \"../utils/request\";\nexport function* handleJoinEvent(action) {\n  const url = \"/event/subscribe\";\n\n  try {\n    const response = yield call(Request, url);\n    yield put(joinEventSuccess(response.data));\n  } catch (error) {\n    yield put(joinEventError(error.message));\n  }\n}\nexport function* handleGetEvent(action) {\n  const url = `/event/${action.eventSlug}`;\n\n  try {\n    const response = yield call(Request, url);\n    yield put(getEventSuccess(response.data));\n  } catch (error) {\n    yield put(getEventError(error.message));\n  }\n}\nexport default function* rootSaga() {\n  yield all([yield takeLatest(GET_EVENT, handleGetEvent), yield takeLatest(JOIN_EVENT, handleJoinEvent)]);\n}","map":null,"metadata":{},"sourceType":"module"}