{"ast":null,"code":"import { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport { GET_PRODUCTS } from \"../constants/products\";\nimport { getProductsSuccess, getProductsError } from \"../actions/products\";\nimport Request from \"../utils/request\";\nexport function* handleGetProducts(action) {\n  const url = `/product/category/${action.categorySlug}?limit=${action.limit}&page=${action.page}&sort=${action.sort}&type=${action.productType}&origin=${action.origin}`;\n\n  try {\n    const response = yield call(Request, url);\n    yield put(getProductsSuccess(response.data.total, response.data.products));\n  } catch (error) {\n    yield put(getProductsError(error.message));\n  }\n}\nexport default function* rootSaga() {\n  yield all([yield takeLatest(GET_PRODUCTS, handleGetProducts)]);\n}","map":null,"metadata":{},"sourceType":"module"}