{"ast":null,"code":"import { put, takeLatest, all, call } from \"redux-saga/effects\";\nimport { GET_OCCURRED_EVENTS, GET_UPCOMMING_EVENTS_SUCCESS } from \"../constants/events\";\nimport { getUpcommingEventsSuccess, getUpcommingEventsError, getOccurredEventsSuccess, getOccurredEventsError } from \"../actions/events\";\nimport Request from \"../utils/request\";\nexport function* handleGetUpcommingEvents(action) {\n  const url = \"/event/upcomming\";\n\n  try {\n    const response = yield call(Request, url);\n    yield put(getUpcommingEventsSuccess(response.data));\n  } catch (error) {\n    yield put(getUpcommingEventsError(error.message));\n  }\n}\nexport function* handleGetOccurredEvents(action) {\n  const url = `/event/occurred?limit=${action.limit}&page=${action.page}&month=${action.month}`;\n\n  try {\n    const response = yield call(Request, url);\n    yield put(getOccurredEventsSuccess(response.data.total, response.data.events));\n  } catch (error) {\n    yield put(getOccurredEventsError(error.message));\n  }\n}\nexport default function* rootSaga() {\n  yield all([yield takeLatest(GET_OCCURRED_EVENTS, handleGetOccurredEvents), yield takeLatest(GET_UPCOMMING_EVENTS_SUCCESS, handleGetUpcommingEvents)]);\n}","map":null,"metadata":{},"sourceType":"module"}